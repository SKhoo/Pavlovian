\-------------------------------------------------------------------------
\ Autoshaping Double Lever
\ Version: 1.11
\ Shaun Khoo (June 2018)
\ >('.')<
\ http://orcid.org/0000-0002-0972-3788
\-------------------------------------------------------------------------

\CONSTANTS
\SESSION CONTROL VARIABLES
^PreSessionDelay = 120		\Delay in seconds
^Trials = 20			\Number of trials. Supports values up to 60.
^MeanITI = 120			\Mean ITI value in s
^ITIvariance = 60		\Value to vary the ITI by (+/-)
^CSduration = 10		\CS duration in seconds
^USduration = 6			\Pump duration in seconds
^LeverOption = 0		\Set Lever Based on BOX = 0, Left Lever = 1, Right Lever = 2
^AlertLongPE = 15		\Length of a 'Long PE' to alert the user to in seconds
^AlertShortPE = 20		\Length of a 'Short PE' to alert the user to in ms
^AlertIRI = 200			\Length of a 'Short Inter-Response Interval' to alert the user to in ms
^ComeBack = 5			\Number of minutes before the end of the session to come back
^Version = 111			\Version number. Will be divided by 100

\INPUTS
^LeftLever = 1
^RightLever = 2
^DisPortEntry = 3		\Discrete port entry. Will occur once per port entry/beam break
^ConPortEntry = 4		\Continuous port entry. Will occur every 10ms (system resolution
				\as long as the beam is broken).
\OUTPUTS
^LeftOut = 1
^RightOut = 2
^Houselight = 5
^Clicker = 6
^Whitenoise = 7
^Pump = 8

\Z-PULSES
^StartPreCS = 1
^StartCS = 2
^StartPostCS = 3

^USComplete = 5
^ITItime = 6
^SessionBegin = 7
^ITIReady = 8
^MemMismatch = 9
^Shutdown = 10

\VARIABLES
\VARIABLES - DATA - Session Totals
DIM A = 49
\Delay Port Entries = A(0)
\Total Port Entries = A(1) [NB: Does not include 'delay']
\ITI Port Entries = A(2)
\PreCS+ Port Entries = A(3)
\CS+ Port Entries = A(4)
\CS+ Lever Presses = A(5)
\PostCS+ Port Entries = A(6)
\US Port Entries = A(7)
\PreCS- Port Entries = A(8)
\CS- Port Entries = A(9)
\CS- Lever Presses = A(10)
\PostCS- Port Entries = A(11)
\Norm-CS+ = A(12) [Norm-CS is calculated as CS+ Port Entries - PreCS+ Port Entries]
\Norm-CS- = A(13)
\Delay PE Durations = A(14)
\Total PE Durations = A(15)
\ITI PE Durations = A(16)
\PreCS PE Durations = A(17)
\CS PE Durations = A(18)
\PostCS PE Durations = A(19)
\US PE Durations = A(20)
\PreCS- Port Entries = A(21)
\CS- Port Entries = A(22)
\PostCS- Port Entries = A(23)
\Norm-CS+ Duration = A(24) [Norm-CS+ Duration is CS+ PE Duration - PreCS+ PE Duration]
\Norm-CS- Duration = A(25)
\Trials With CS+ Lever Press = A(26)
\Probability CS+ Lever Press = A(27)
\Trials with CS+ Port Entry = A(28)
\Probability CS+ Port Entry = A(29)
\Sum CS+ Port Entry Latency = A(30)
\Sum CS+ Lever Press Latency = A(31)
\Response Bias CS+ = A(32)  [(CS Lever Presses - CS Port Entries) / (CS Lever Presses + CS Port Entries)]
\Probability Difference CS+ = A(33) [Probability CS+ Lever Press - Probability CS+ Port Entry]
\Latency Score CS+ = A(34) [(Mean CS+ Port Entry Latency - Mean CS+ Lever Press Latency)/CS Duration]
\CS+ PCA Score = A(35) [(CS+ Response Bias + CS+ Latency Score + CS+ Probability Difference)/3]
\Trials with CS- Lever Press = A(36)
\Probability CS- Lever Press = A(37)
\Trials with CS- Port Entry = A(38)
\Probability CS- Port Entry = A(39)
\Sum CS- Port Entry Latency = A(40)
\Sum CS- Lever Press Latency = A(41)
\Response Bias CS- = A(42)
\Probabilty Difference CS- = A(43)
\Latency Score CS- = A(44)
\CS- PCA Score = A(45)
\Long PE Alerts = A(46) [Number of PE Durations greater than 15 s]
\Short Durations Alerts = A(47) [Number of 5 point moving averages with PE Duration < 0.02 s]
\Short IRI Alerts = A(48) [Number of 5 point moving averages with inter-response interval < 0.2 s]
var_alias Weight = A(49)

\VARIABLES - DATA - Trial Bins
DIM B = 10000	\ITI Port Entries,		subscript (3T+0)
		\ITI Port Entry Durations,	subscript (3T+1)
		\III Port Entry Latencies,	subscript (3T+2)
DIM C = 10000	\PreCS Port Entries,		subscript (3T+0)
		\PreCS Port Entry Durations,	subscript (3T+1)
		\PreCS Port Entry Latencies,	subscript (3T+2)
DIM D = 10000	\CS Port Entries,		subscript (3T+0)
		\CS Port Entry Durations,	subscript (3T+1)
		\CS Port Entry Latencies,	subscript (3T+2)
DIM E = 10000	\Lever Presses,			subscript (2T+0)
		\Lever Press Latencies,		subscript (2T+1)
DIM F = 10000	\PostCS Port Entries,		subscript (3T+0)
		\PostCS Port Entry Durations,	subscript (3T+1)
		\PostCS Port Entry Latencies,	subscript (3T+2)
DIM G = 10000	\US Port Entries,		subscript (3T+0)
		\US Port Entry Durations,	subscript (3T+1)
		\US Port Entry Latencies,	subscript (3T+2)
DIM H = 10000	\PreCS- Port Entries,		subscript (3T+0)
		\PreCS- Port Entry Durations,	subscript (3T+1)
		\PreCS- Port Entry Latencies,	subscript (3T+2)
DIM I = 10000	\CS- Port Entries,		subscript (3T+0)
		\CS- Port Entry Durations,	subscript (3T+1)
		\CS- Port Entry Latencies,	subscript (3T+2)
DIM J = 10000	\Lever- Presses,		subscript (2T+0)
		\Lever- Press Latencies,	subscript (2T+1)
DIM K = 10000	\PostCS- Port Entries,		subscript (3T+0)
		\PostCS- Port Entry Durations,	subscript (3T+1)
		\PostCS- Port Entry Latencies,	subscript (3T+2)

\VARIABLES - DATA - Timecourse Arrays
DIM L = 10000	\All Port Entry Timestamps,	subscript P
DIM M = 10000	\All Port Entry Durations,	subscript P
DIM N = 10000	\All Active Lever Presses,	subscript Q
DIM O = 10000	\All Inactive Lever Presses,	subscript R

\VARIABLES - CONTROL - TRIAL TYPE LIST
LIST U = 1, 2, 1, 2, 1, 2

LIST V = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,
42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60

\VARIABLES - CONTROL - ITI LISTS
\Supports up to 60 trials. Will be generated algorithmically
LIST W = 0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,
42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60

\VARIABLES - CONTROL - WORKING VARIABLES
DIM X = 91
\X(0) = Session Clock (seconds)
\X(1) = Centisecond Clock
\X(2) = Trial Clock
\X(3) = Trial Component Clock
\X(4) = Period countdown clock
\X(5) = ITI selector
\X(6) = ITI number
\X(7) = ITI Halfway
\X(8) = SECSTODAY at Start
\X(9) = Expected End Time
\X(10) = Come Back Hours
\X(11) = Come Back Minutes
\X(12) = Z(1) memory
\X(13) = Z(2) memory
\X(14) = Z(3) memory
\X(15) = Z(4) memory
\X(21) = Average inter-response interval between L(P) and L(P-5)
\X(22) = ARITHMETICMEAN M(P-4) and M(P)
\X(23) = Current PE Trial
\X(24) = T memory value
\X(25) = Trial Lever
\X(26) = Trial lever memory value
\X(27) = Session State - 0 = delay, 1 = ITI, 2 = PreCS, 3 = CS, 4 = Paired US, 5 = PostCS
\X(28) = Pump Operation Time
\X(29) = Temporary subscript value storage.
\X(30) - X(90) = Temporary List W holding and randomisation

\VARIABLES - CONTROL - SESSION PARAMETERS
DIM Z = 15
var_alias Session Length (s) = Z(0)
var_alias Pre Session Delay (s) = Z(1)
var_alias Number of Trials = Z(2)
var_alias Mean ITI Duration (s) = Z(3)
var_alias ITI varies by (s) = Z(4)
var_alias CS Duration (s) = Z(5)
var_alias US Duration (s) = Z(6)
var_alias Active Lever (1Left 2Right) = Z(7)
var_alias Inactive Lever (1Left 2Right) = Z(8)
var_alias Long PE Definition (s) = Z(9)
var_alias Short PE Definition (s) = Z(10)
var_alias Short IRI Definition (s) = Z(11)
var_alias Come back x min before end = Z(12)
var_alias CS+ Trials = Z(13)
var_alias CS- Trials = Z(14)
var_alias Version = Z(15)

DISKVARS = A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, V, W, Z
DISKOPTIONS = FULLHEADERS
DISKFORMAT = 16.3
DISKCOLUMNS = 1
Y2KCOMPLIANT

\-------------------------------------------------------------------------
\State Set 1 - Control Program

S.S.1,
S1,	\State 1 sets the default variables
	0.01": SET Z(1) = ^PreSessionDelay, Z(2) = ^Trials, Z(3) = ^MeanITI;
	SET Z(4) = ^ITIvariance, Z(5) = ^CSduration, Z(6) = ^USduration;
	SET Z(7) = ^LeverOption, Z(9) = ^AlertLongPE;
	SET Z(10) = ^AlertShortPE / 1000, Z(11) = ^AlertIRI / 1000, Z(12) = ^ComeBack;
	SET Z(15) = ^Version / 100;

	\Seal all the arrays
	SET B(3) = -987.987, C(3) = -987.987, D(3) = -987.987;
	SET E(2) = -987.987, F(3) = -987.987, G(3) = -987.987;
	SET H(3) = -987.987, I(3) = -987.987, J(2) = -987.987;
	SET K(3) = -987.987;
	SET L(P) = -987.987, M(P) = -987.987, N(Q) = -987.987;
	SET O(R) = -987.987;
	
	SHOW 1, Initialising, Z(0); ZEROARRAY W;

	\Set the memory values
	SET X(12) = Z(1), X(13) = Z(2), X(14) = Z(3), X(15) = Z(4);

	\Set lever if ^LeverOption is not 1 or 2
	IF Z(7) = ^LeftLever [@LEFTOK, @CHECK]
		@LEFTOK: SET Z(8) = ^RightLever---> S2
		@CHECK: IF Z(7) = ^RightLever [@RIGHTOK, @SET]
			@RIGHTOK: SET Z(8) = ^LeftLever---> S2
			@SET: SET Z(7) = BOX / 2, X(29) = Y, Y = Z(7);
			~Y := Frac(Y);~;
			SET Z(7) = Y, Y = X(29);
			IF Z(7) < 0.1 [@EVEN, @ODD]
				@EVEN: SET Z(7) = ^RightLever, Z(8) = ^LeftLever ---> S2
				@ODD: SET Z(7) = ^LeftLever, Z(8) = ^RightLever ---> S2

S2,	\State 2 will generate the ITIs
	0.01": IF Z(2) + 1 - Y >= 3 [@FULL, @ELIF]
		@FULL: SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y ---> SX
		@ELIF: IF Z(2) + 1 - Y >= 2 [@PARTIAL, @ELIF]
			@PARTIAL: SET W(Y) = Z(3) - Z(4); ADD Y; SET W(Y) = Z(3) + Z(4); ADD Y;
			SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
			@ELIF: IF Z(2) + 1 - Y >= 1 [@SINGLE, @NONE]
				@SINGLE: SET W(Y) = Z(3); ADD Y; SET W(Y) = -987.987;
				SHOW 1, Selecting ITIs, Y; SET Y = 0 ---> S3
				@NONE: SET W(Y) = -987.987; SHOW 1, Selecting ITIs, Y;
				SET Y = 0 ---> S3

S3,	\State 3 will select the ITIs
	0.01": IF Y < Z(2) + 1 [@GENERATE, @COMPLETE]
		@GENERATE: RANDD X(5) = W; ADD X(91); IF X(5) > 0 [@ACCEPT, @REJECT]
			@ACCEPT: SET X(Y+30) = X(5); ADD Y ---> SX
			@REJECT: ---> SX
		@COMPLETE: SET X(Y+30) = -987.987; ZEROARRAY W; SET Y = 0 ---> S4

S4,	\State 4 will shift the ITIs back to the W array and calculate session length
	0.01": IF X(Y+30) = -987.987 [@SEAL, @TRANSFER]
		@SEAL: SET W(Y) = -987.987; SUMARRAY Z(0) = W, 0, Y-1;
		SET Z(0) = Z(0) + (Z(2) * 3 * Z(5));
		SET Y = 0; Z^ITIReady; SHOW 1, Session Length, Z(0) ---> S5
		@TRANSFER: SET W(Y) = X(Y+30); ADD Y ---> SX

S5,	\State 5 will empty the RANDD function
	0.01": IF X(91) < 61 [@RUN, @STOP]
		@RUN: RANDD X(5) = W; ADD X(91) ---> SX
		@STOP: ---> S6

S6,	\State 6 waits for the start command
	#START: SET X(0) = 0 - Z(1); SHOW 1, Session Time, X(0);
	SHOW 3, Time to Trial, W(Y); SHOW 4, Number of Trials, Z(2) ---> S7

	#Z^MemMismatch: SET X(12) = Z(1), X(13) = Z(2);
	SET X(14) = Z(3), X(15) = Z(4); ZEROARRAY W; SET X(91) = 0 ---> S2

S7,	\State 7 counts down the delay
	1": ADD X(0); SHOW 1, Session Time, X(0);
	IF X(0) >= 0 [@LIGHTSON, @WAIT]
		@LIGHTSON: Z^SessionBegin;
		SET STARTHOURS = CURRENTHOURS, STARTMINUTES = CURRENTMINUTES;
		SET STARTSECONDS = CURRENTSECONDS ---> S8
		@WAIT: ---> SX

S8,	\State 8 continues counting the clock during the session
	1": ADD X(0); SHOW 1, Session Time, X(0) ---> SX

	\Upon receiving the ^Shutdown Z-Pulse S8 will calculate
	\Norm-CS port entries and durations for CS+ and CS-
	#Z^Shutdown: SET A(12) = A(4) - A(3), A(24) = A(18) - A(17);
	SET A(13) = A(9) - A(8), A(25) = A(22) - A(21);

	\Calculate the probability difference for CS+ and CS- trials
	SET A(27) = A(26) / Z(13), A(29) = A(28) / Z(13);
	SET A(33) = A(27) - A(29);
	SET A(37) = A(36) / Z(14), A(39) = A(38) / Z(14);
	SET A(43) = A(37) - A(39);
	
	\Calculate the latency scores
	SET A(34) = ((A(30) / Z(13)) - (A(31) / Z(13))) / Z(5);
	SET A(44) = ((A(40) / Z(14)) - (A(41) / Z(14))) / Z(5);
	
	\Calculate the response biases, then PCA scores
	IF A(5) + A(4) > 0 [@CALCULATE, @NORESPONSE]
		@CALCULATE: SET A(32) = (A(5) - A(4)) / (A(5) + A(4));
		SET A(35) = (A(32) + A(33) + A(34)) / 3;
		IF A(10) + A(9) > 0 [@CALCULATE, @NORESPONSE]
			@CALCULATE: SET A(42) = (A(10) - A(9)) / (A(10) + A(9));
			SET A(45) = (A(42) + A(43) + A(44)) / 3 ---> S9
			@NORESPONSE: SET A(42) = -1;
			SET A(45) = (A(43) + A(44)) / 2 ---> S9
		@NORESPONSE: SET A(32) = -1;
		SET A(35) = (A(33) + A(34)) / 2;
		IF A(10) + A(9) > 0 [@CALCULATE, @NORESPONSE]
			@CALCULATE: SET A(42) = (A(10) - A(9)) / (A(10) + A(9));
			SET A(45) = (A(42) + A(43) + A(44)) / 3 ---> S9
			@NORESPONSE: SET A(42) = -1;
			SET A(45) = (A(43) + A(44)) / 2 ---> S9

S9,	\State 9 waits for a second and closes the program
	1": ---> STOPABORTFLUSH

\-------------------------------------------------------------------------
\State Set 2 - Centisecond Clock

S.S.2,
S1,	\State 1 waits for the start command
	#START: SET X(1) = 0 - Z(1); SET B(3*T+2) = -1;
	IF V(0) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SET C(3*T) = 0, C(3*T+1) = 0, C(3*T+2) = -1;
		SET D(3*T) = 0, D(3*T+1) = 0, D(3*T+2) = -1;
		SET E(2*T) = 0, E(2*T+1) = -1;
		SET F(3*T) = 0, F(3*T+1) = 0, F(3*T+2) = -1;
		SET G(3*T) = 0, G(3*T+1) = 0, G(3*T+2) = -1;

		SET H(3*T) = -10, H(3*T+1) = -10, H(3*T+2) = -10;
		SET I(3*T) = -10, I(3*T+1) = -10, I(3*T+2) = -10;
		SET J(2*T) = -10, J(2*T+1) = -10;
		SET K(3*T) = -10, K(3*T+1) = -10, K(3*T+2) = -10 ---> S2
		@INACTIVE: SET C(3*T) = -10, C(3*T+1) = -10, C(3*T+2) = -10;
		SET D(3*T) = -10, D(3*T+1) = -10, D(3*T+2) = -10;
		SET E(2*T) = -10, E(2*T+1) = -10;
		SET F(3*T) = -10, F(3*T+1) = -10, F(3*T+2) = -10;
		SET G(3*T) = -10, G(3*T+1) = -10, G(3*T+2) = -10;

		SET H(3*T) = 0, H(3*T+1) = 0, H(3*T+2) = -1;
		SET I(3*T) = 0, I(3*T+1) = 0, I(3*T+2) = -1;
		SET J(2*T) = 0, J(2*T+1) = -1;
		SET K(3*T) = 0, K(3*T+1) = 0, K(3*T+2) = -1 ---> S2

S2,	\State 2 counts upwards in 10ms increments
	0.01": SET X(1) = X(1) + 0.01, X(2) = X(2) + 0.01 ---> SX
	#Z^StartPreCS: SET X(2) = 0 - Z(5), X(3) = 0 ---> S3

	#Z^Shutdown: ---> S4

S3,	\State 3 counts upwards in 10ms increments during a trial
	0.01": SET X(1) = X(1) + 0.01, X(2) = X(2) + 0.01, X(3) = X(3) + 0.01 ---> SX

	#Z^StartCS ! #Z^StartPostCS: SET X(3) = 0 ---> SX
	#Z^ITItime: SET X(2) = 0, X(3) = 0;
	ADD X(6); IF X(6) > Z(2) [@FINALITI, @NORMAL]
		@FINALITI: SUB X(6); SHOW 3, Trials Complete, X(6); ADD T;
		SET B(3*T) = 0, B(3*T+1) = 0, B(3*T+2) = -1;
		SET B(3*T+3) = -987.987 ---> S2
		@NORMAL: SHOW 3, Trial Number, X(6); ADD T;
		SET B(3*T) = 0, B(3*T+1) = 0, B(3*T+2) = -1;
		

		SET B(3*T+3) = -987.987, C(3*T+3) = -987.987, D(3*T+3) = -987.987;
		SET E(2*T+2) = -987.987, F(3*T+3) = -987.987, G(3*T+3) = -987.987;
		SET H(3*T+3) = -987.987, I(3*T+3) = -987.987, J(2*T+2) = -987.987;
		SET K(3*T+3) = -987.987;
		IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET C(3*T) = 0, C(3*T+1) = 0, C(3*T+2) = -1;
			SET D(3*T) = 0, D(3*T+1) = 0, D(3*T+2) = -1;
			SET E(2*T) = 0, E(2*T+1) = -1;
			SET F(3*T) = 0, F(3*T+1) = 0, F(3*T+2) = -1;
			SET G(3*T) = 0, G(3*T+1) = 0, G(3*T+2) = -1;

			SET H(3*T) = -10, H(3*T+1) = -10, H(3*T+2) = -10;
			SET I(3*T) = -10, I(3*T+1) = -10, I(3*T+2) = -10;
			SET J(2*T) = -10, J(2*T+1) = -10;
			SET K(3*T) = -10, K(3*T+1) = -10, K(3*T+2) = -10 ---> S2
			@INACTIVE: SET C(3*T) = -10, C(3*T+1) = -10, C(3*T+2) = -10;
			SET D(3*T) = -10, D(3*T+1) = -10, D(3*T+2) = -10;
			SET E(2*T) = -10, E(2*T+1) = -10;
			SET F(3*T) = -10, F(3*T+1) = -10, F(3*T+2) = -10;
			SET G(3*T) = -10, G(3*T+1) = -10, G(3*T+2) = -10;

			SET H(3*T) = 0, H(3*T+1) = 0, H(3*T+2) = -1;
			SET I(3*T) = 0, I(3*T+1) = 0, I(3*T+2) = -1;
			SET J(2*T) = 0, J(2*T+1) = -1;
			SET K(3*T) = 0, K(3*T+1) = 0, K(3*T+2) = -1 ---> S2

	#Z^Shutdown: ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 3 - Trial Management

S.S.3,
S1,	\State 1 waits for the SessionBegin Z-Pulse
	#Z^SessionBegin: SET X(6) = 1, X(27) = 1, X(4) = W(0);
	SHOW 3, Trial Number, X(6);
	ON ^Houselight; LIST X(25) = V(S); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SHOW 2, Time to CS+ Trial, X(4) ---> S2
		@INACTIVE: SHOW 2, Time to CS- Trial, X(4) ---> S2

S2,	\State 2 counts down until the next trial
	1": SUB X(4); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SHOW 2, Time to CS+ Trial, X(4);
		IF X(4) <= 0 [@BEGINPRECS, @NULL]
			@BEGINPRECS: Z^StartPreCS; SET X(4) = Z(5), X(27) = 2;
			SHOW 2, Pre-CS+ Time, X(4) ---> S3
			@NULL: ---> SX
		@INACTIVE: SHOW 2, Time to CS- Trial, X(4);
		IF X(4) <= 0 [@BEGINPRECS, @NULL]
			@BEGINPRECS: Z^StartPreCS; SET X(4) = Z(5), X(27) = 2;
			SHOW 2, Pre-CS- Time, X(4) ---> S3
			@NULL: ---> SX

	#Z^USComplete: SET X(27) = 1 ---> SX

S3,	\State 3 waits for the PreCS period to finish
	1": SUB X(4); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SHOW 2, Pre-CS+ Time, X(4);
		IF X(4) <= 0 [@BEGINCS, @WAIT]
			@BEGINCS: Z^StartCS; SET X(4) = Z(5), X(27) = 3;
			SHOW 2, CS+ Time, X(4) ---> S4
			@WAIT: ---> SX
		@INACTIVE: SHOW 2, Pre-CS- Time, X(4);
			IF X(4) <= 0 [@BEGINCS, @WAIT]
			@BEGINCS: Z^StartCS; SET X(4) = Z(5), X(27) = 3;
			SHOW 2, CS- Time, X(4) ---> S4
			@WAIT: ---> SX

S4,	\State 4 waits for the CS period to finish
	1": SUB X(4); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SHOW 2, CS+ Time, X(4);
		IF X(4) <= 0 [@ENDCS, @WAIT]
			@ENDCS: Z^StartPostCS; SET X(4) = Z(5);
			SHOW 2, Post-CS+ Time, X(4); OFF ^LeftOut, ^RightOut;
			ON ^Pump; SET X(27) = 4 ---> S5
			@WAIT: ---> SX
		@INACTIVE: SHOW 2, CS- Time, X(4);
		IF X(4) <= 0 [@ENDCS, @WAIT]
			@ENDCS: Z^StartPostCS; SET X(4) = Z(5);
			SHOW 2, Post-CS- Time, X(4); OFF ^LeftOut, ^RightOut;
			SET X(27) = 5  ---> S5
			@WAIT: ---> SX

S5,	\State 5 waits for the PostCS period to finish
	1": SUB X(4); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SHOW 2, Post-CS+ Time, X(4);
		IF X(4) <= 0 [@ITI, @WAIT]
			@ITI: SET Y = X(6); SET X(4) = W(Y), X(27) = 1;
			SET X(7) = X(4) / 2;
			IF X(4) <= 0 [@WTF, @CHECK]
				@WTF: SHOW 2, No Further ITI!, X(4) ---> S8
				@CHECK: LIST X(25) = V(S); Z^ITItime; IF W(Y+1) <= 0 [@LASTITI, @CONTINUE]
					@LASTITI: SHOW 2, Final Interval, X(4); CLEAR 15, 15 ---> S6
					@CONTINUE: IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
						@ACTIVE: SHOW 2, Time to CS+ Trial, X(4) ---> S2
						@INACTIVE: SHOW 2, Time to CS- Trial, X(4) ---> S2
			@WAIT: ---> SX
		@INACTIVE: SHOW 2, Post-CS- Time, X(4);
		IF X(4) <= 0 [@ITI, @WAIT]
			@ITI: SET Y = X(6); SET X(4) = W(Y), X(27) = 1;
			SET X(7) = X(4) / 2;
			IF X(4) <= 0 [@WTF, @CHECK]
				@WTF: SHOW 2, No Further ITI!, X(4) ---> S8
				@CHECK: LIST X(25) = V(S); Z^ITItime; IF W(Y+1) <= 0 [@LASTITI, @CONTINUE]
					@LASTITI: SHOW 2, Final Interval, X(4); CLEAR 15, 15 ---> S6
					@CONTINUE: IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
						@ACTIVE: SHOW 2, Time to CS+ Trial, X(4) ---> S2
						@INACTIVE: SHOW 2, Time to CS- Trial, X(4) ---> S2
			@WAIT: ---> SX

	#Z^USComplete: SET X(27) = 5 ---> SX

S6,	\State 6 waits for the last ITI to finish
	1": SUB X(4); SHOW 2, Final Interval, X(4);
	IF X(4) <= 0 [@SHUTDOWN, @WAIT]
		@SHUTDOWN: Z^Shutdown; SHOW 2, Session Complete, X(4);
		OFF ^Houselight ---> S7
		@WAIT: ---> SX

S7,	\State 7 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 4 - Port Entry Recording

S.S.4,
S1,	\State 1 waits for the start command
	#START: SHOW 5, Total Port Entries, A(1);
	SHOW 6, ITI Port Entries, A(2);
	SHOW 7, Pre-CS+ Port Entries, A(3);
	SHOW 8, CS+ Port Entries, A(4);
	SHOW 9, Post-CS+ Port Entries, A(5);
	SHOW 11, Pre-CS- Port Entries, A(8);
	SHOW 12, CS- Port Entries, A(9);
	SHOW 13, Post-CS- Port Entries, A(11) ---> S2

S2,	\State 2 counts port entries during the delay
	#R^DisPortEntry: ADD A(0); SET L(P) = X(1), M(P) = 0;
	SET L(P+1) = -987.987, M(P+1) = -987.987;
	SHOW 20, Pre-Session Port Entries, A(0) ---> S3

	#Z^SessionBegin: ---> S4

S3,	\State 3 counts port entry duration during the delay
	#R^ConPortEntry: SET A(14) = A(14) + 0.01, M(P) = M(P) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = 0.001, A(14) = A(14) + 0.001; ADD P;
		IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12
		@ACCEPT: ADD P;
		IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12

S4,	\State 4 counts port entries during the ITI [X(27) = 1]
	#R^DisPortEntry: ADD A(1), A(2), B(3*T); SET L(P) = X(1), M(P) = 0;
	SET L(P+1) = -987.987, M(P+1) = -987.987, X(23) = T;
	SHOW 5, Total Port Entries, A(1);
	SHOW 6, ITI Port Entries, A(2);
	IF B(3*T+2) < 0 [@LATENCY, @NULL]
		@LATENCY: SET B(3*T+2) = X(2) ---> S5
		@NULL: ---> S5

	#Z^StartPreCS: ---> S6
	#Z^Shutdown: ---> S14

S5,	\State 5 counts port entry duration during the ITI [X(27) = 1]
	#R^ConPortEntry: SET A(15) = A(15) + 0.01, A(16) = A(16) + 0.01;
	SET M(P) = M(P) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		SET A(16) = A(16) + 0.001; ADD P;
		SET X(24) = T, T = X(23), B(3*T+1) = B(3*T+1) + 0.001, T = X(24);
		IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12
		@ACCEPT: SET X(24) = T, T = X(23), B(3*T+1) = B(3*T+1) + M(P), T = X(24);
		ADD P;
		IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12

	#Z^Shutdown: IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		SET A(16) = A(16) + 0.001; ADD P;
		SET X(24) = T, T = X(23), B(3*T+1) = B(3*T+1) + 0.001, T = X(24) ---> S14
		@ACCEPT: SET X(24) = T, T = X(23), B(3*T+1) = B(3*T+1) + M(P), T = X(24); ADD P ---> S14

S6,	\State 6 counts port entries during the Pre-CS Period [X(27) = 2]
	#R^DisPortEntry: SET X(26) = X(25); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: ADD A(1), A(3), C(3*T); SET L(P) = X(1), M(P) = 0;
		SET L(P+1) = -987.987, M(P+1) = -987.987, X(23) = T;
		SHOW 5, Total Port Entries, A(1);
		SHOW 7, Pre-CS+ Port Entries, A(3);
		IF C(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET C(3*T+2) = X(3) ---> S7
			@NULL: ---> S7
		@INACTIVE: ADD A(1), A(8), H(3*T); SET L(P) = X(1), M(P) = 0;
		SET L(P+1) = -987.987, M(P+1) = -987.987, X(23) = T;
		SHOW 5, Total Port Entries, A(1);
		SHOW 11, Pre-CS- Port Entries, A(8);
		IF H(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET H(3*T+2) = X(3) ---> S7
			@NULL: ---> S7

	#Z^StartCS: ---> S8
	#Z^Shutdown: ---> S14

S7,	\State 7 counts port entry duration during the Pre-CS Period [X(27) = 2]
	#R^ConPortEntry: SET A(15) = A(15) + 0.01, M(P) = M(P) + 0.01;
	IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SET A(17) = A(17) + 0.01 ---> SX	
		@INACTIVE: SET A(21) = A(21) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		ADD P; SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(17) = A(17) + 0.001, C(3*T+1) = C(3*T+1) + 0.001;
			SET T = X(24); IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET A(21) = A(21) + 0.001, H(3*T+1) = H(3*T+1) + 0.001;
			SET T = X(24); IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
		@ACCEPT: SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET C(3*T+1) = C(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET H(3*T+1) = H(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12

	#Z^Shutdown: IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(17) = A(17) + 0.001, C(3*T+1) = C(3*T+1) + 0.001, T = X(24); ADD P ---> S14
			@INACTIVE: SET A(21) = A(21) + 0.001, H(3*T+1) = H(3*T+1) + 0.001, T = X(24); ADD P  ---> S14
		@ACCEPT: SET X(24) = T, T = X(23), C(3*T+1) = C(3*T+1) + M(P), T = X(24);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET C(3*T+1) = C(3*T+1) + M(P); ADD P  ---> S14
			@INACTIVE: SET H(3*T+1) = H(3*T+1) + M(P); ADD P  --- > S14

S8,	\State 8 counts port entries during the CS Period [X(27) = 3]
	#R^DisPortEntry: SET X(26) = X(25); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: ADD A(1), A(4), D(3*T); SET L(P) = X(1), M(P) = 0;
		SET L(P+1) = -987.987, M(P+1) = -987.987, X(23) = T;
		SHOW 5, Total Port Entries, A(1);
		SHOW 8, CS+ Port Entries, A(4);
		IF D(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET D(3*T+2) = X(3), A(30) = A(30) + X(3);
			ADD A(28) ---> S9
			@NULL: ---> S9
		@INACTIVE: ADD A(1), A(9), I(3*T); SET L(P) = X(1), M(P) = 0;
		SET L(P+1) = -987.987, M(P+1) = -987.987, X(23) = T;
		SHOW 5, Total Port Entries, A(1);
		SHOW 12, CS- Port Entries, A(9);
		IF I(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET I(3*T+2) = X(3), A(40) = A(40) + X(3);
			ADD A(38) ---> S9
			@NULL: ---> S9

	#Z^StartPostCS: IF X(25) < 1.5 [@PAIRED, @UNPAIRED]
		@PAIRED: IF D(3*T+2) < 0 [@NORESPONSE, @ACCEPT]
			@NORESPONSE: SET A(30) = A(30) + Z(5) ---> S10
			@ACCEPT: ---> S10
		@UNPAIRED: IF I(3*T+2) < 0 [@NORESPONSE, @ACCEPT]
			@NORESPONSE: SET A(40) = A(40) + Z(5) ---> S12
			@ACCEPT: ---> S12

	#Z^Shutdown: ---> S14

S9,	\State 9 counts port entry duration during the CS Period [X(27) = 3]
	#R^ConPortEntry: SET A(15) = A(15) + 0.01, M(P) = M(P) + 0.01;
	IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SET A(18) = A(18) + 0.01 ---> SX
		@INACTIVE: SET A(22) = A(22) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		ADD P; SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(18) = A(18) + 0.001, D(3*T+1) = D(3*T+1) + 0.001, T = X(24);
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET A(22) = A(22) + 0.001, I(3*T+1) = I(3*T+1) + 0.001, T = X(24);
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
		@ACCEPT: SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET D(3*T+1) = D(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET I(3*T+1) = I(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12

	#Z^Shutdown: IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		ADD P;
		SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(18) = A(18) + 0.001, D(3*T+1) = D(3*T+1) + 0.001;
			SET T = X(24) ---> S14
			@INACTIVE: SET A(22) = A(22) + 0.001, I(3*T+1) = I(3*T+1) + 0.001;
			SET T = X(24) ---> S14
		@ACCEPT: SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(18) = A(18) + 0.001, D(3*T+1) = D(3*T+1) + M(P); ADD P;
			SET T = X(24) ---> S14
			@INACTIVE: SET A(22) = A(22) + 0.001, I(3*T+1) = I(3*T+1) + M(P); ADD P;
			SET T = X(24) ---> S14

S10,	\State 10 counts port entries during a paired US - US period during Post-CS [X(27) = 4]
	#R^DisPortEntry: ADD A(1), A(6), A(7), F(3*T), G(3*T);
	SET L(P) = X(1), M(P) = 0, X(23) = T;
	SET L(P+1) = -987.987, M(P+1) = -987.987;
	SHOW 5, Total Port Entries, A(1);
	SHOW 9, Post-CS+ Port Entries, A(6);
	IF F(3*T+2) < 0 [@LATENCY, @NULL]
		@LATENCY: SET F(3*T+2) = X(3);
		IF G(3*T+2) < 0 [@USLATENCY, @NULL]
			@USLATENCY: SET G(3*T+2) = X(3) ---> S11
			@NULL: ---> S11
		@NULL: IF G(3*T+2) < 0 [@USLATENCY, @NULL]
			@USLATENCY: SET G(3*T+2) = X(3) ---> S11
			@NULL: ---> S11

	#Z^USComplete: ---> S12
	#Z^Shutdown: ---> S14

S11,	\State 11 counts port entry duration during a paired US [X(27) = 4]
	#R^ConPortEntry: SET A(15) = A(15) + 0.01, A(19) = A(19) + 0.01;
	SET A(20) = A(20) + 0.01, M(P) = M(P) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		SET A(19) = A(19) + 0.001, A(20) = A(20) + 0.001; ADD P;
		SET X(24) = T, T = X(23), F(3*T+1) = F(3*T+1) + 0.001;
		SET G(3*T+1) = G(3*T+1) + 0.001, T = X(24);
		IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12
		@ACCEPT: SET X(24) = T, T = X(23), F(3*T+1) = F(3*T+1) + M(P);
		SET G(3*T+1) = G(3*T+1) + M(P), T = X(24);
		ADD P; IF X(27) < 3.5 [@LOWER, @UPPER]
			@LOWER: IF X(27) = 1 [@ONE, @CHECK]
				@ONE: ---> S4
				@CHECK: IF X(27) = 2 [@TWO, @CHECK]
					@TWO: ---> S6
					@CHECK: IF X(27) = 3 [@THREE, @ZERO]
						@THREE: ---> S8
						@ZERO: ---> S2
			@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
				@FOUR: ---> S10
				@FIVE: ---> S12

	#Z^Shutdown: IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		SET A(19) = A(19) + 0.001, A(20) = A(20) + 0.001; ADD P;
		SET X(24) = T, T = X(23), F(3*T+1) = F(3*T+1) + 0.001;
		SET G(3*T+1) = G(3*T+1) + 0.001, T = X(24) ---> SX
		@ACCEPT: SET X(24) = T, T = X(23), F(3*T+1) = F(3*T+1) + M(P);
		SET G(3*T+1) = G(3*T+1) + M(P), T = X(24); ADD P ---> SX

S12,	\State 12 counts Post-CS port entries in the absence of US [X(27) = 5]
	#R^DisPortEntry: SET X(26) = X(25); IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: ADD A(1), A(6), F(3*T);
		SET L(P) = X(1), M(P) = 0, X(23) = T;
		SET L(P+1) = -987.987, M(P+1) = -987.987;
		SHOW 5, Total Port Entries, A(1);
		SHOW 9, Post-CS+ Port Entries, A(6);
		IF F(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET F(3*T+2) = X(3) ---> S13
			@NULL: ---> S13
		@INACTIVE: ADD A(1), A(11), K(3*T);
		SET L(P) = X(1), M(P) = 0, X(23) = T;
		SET L(P+1) = -987.987, M(P+1) = -987.987;
		SHOW 5, Total Port Entries, A(1);
		SHOW 13, Post-CS- Port Entries, A(11);
		IF K(3*T+2) < 0 [@LATENCY, @NULL]
			@LATENCY: SET K(3*T+2) = X(3) ---> S13
			@NULL: ---> S13

	#Z^ITItime: ---> S4
	#Z^Shutdown: ---> S14

S13,	\State 13 counts Post-CS port entry duration in the absence of US
	#R^ConPortEntry: SET A(15) = A(15) + 0.01, M(P) = M(P) + 0.01;
	IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: SET A(19) = A(19) + 0.01 ---> SX
		@INACTIVE: SET A(23) = A(23) + 0.01 ---> SX

	0.01": IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		ADD P; SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(19) = A(19) + 0.001, F(3*T+1) = F(3*T+1) + 0.001;
			SET T = X(24); IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET A(23) = A(23) + 0.001, K(3*T+1) = K(3*T+1) + 0.001;
			SET T = X(24); IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
		@ACCEPT: SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET F(3*T+1) = F(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12
			@INACTIVE: SET K(3*T+1) = K(3*T+1) + M(P), T = X(24); ADD P;
			IF X(27) < 3.5 [@LOWER, @UPPER]
				@LOWER: IF X(27) = 1 [@ONE, @CHECK]
					@ONE: ---> S4
					@CHECK: IF X(27) = 2 [@TWO, @CHECK]
						@TWO: ---> S6
						@CHECK: IF X(27) = 3 [@THREE, @ZERO]
							@THREE: ---> S8
							@ZERO: ---> S2
				@UPPER: IF X(27) = 4 [@FOUR, @FIVE]
					@FOUR: ---> S10
					@FIVE: ---> S12

	#Z^Shutdown: IF M(P) < 0.01 [@GIVENOMINAL, @ACCEPT]
		@GIVENOMINAL: SET M(P) = M(P) + 0.001, A(15) = A(15) + 0.001;
		ADD P; SET X(24) = T, T = X(23);
		IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET A(19) = A(19) + 0.001, F(3*T+1) = F(3*T+1) + 0.001;
			SET T = X(24) ---> S14
			@INACTIVE: SET A(23) = A(23) + 0.001, K(3*T+1) = K(3*T+1) + 0.001;
			SET T = X(24) ---> S14
		@ACCEPT: SET X(24) = T, T = X(23);
		SET T = X(24); IF X(26) < 1.5 [@ACTIVE, @INACTIVE]
			@ACTIVE: SET F(3*T+1) = F(3*T+1) + M(P), T = X(24); ADD P ---> S14
			@INACTIVE: SET K(3*T+1) = K(3*T+1) + M(P), T = X(24); ADD P ---> S14

S14,	\State 14 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 5 - Pump Delivery

S.S.5,
S1,	\State 1 waits for the start command
	#START: SET X(28) = Z(6) * 1" ---> S2

S2,	\State 2 waits for the ^StartPostCS Z-Pulse
	#Z^StartPostCS: IF X(25) < 1.5 [@PUMP, @NULL]
		@PUMP: ---> S3
		@NULL: ---> SX

	#Z^Shutdown: ---> S4

S3,	\State 3 waits to switch off the US
	X(28)#T: OFF ^Pump; Z^USComplete ---> S2

	#Z^Shutdown: OFF ^Pump ---> S4

S4,	\State 4 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 6 - Lever Press Recording

S.S.6,
S1,	\State 1 waits for the START command
	#START: SHOW 10, CS+ Lever Presses, A(5);
	SHOW 14, CS- Lever Presses, A(10) ---> S2

S2,	\State 2 waits for the ^StartCS Z-Pulse
	#Z^StartCS: IF X(25) < 1.5 [@ACTIVE, @INACTIVE]
		@ACTIVE: ON Z(7)---> S3
		@INACTIVE: ON Z(8) ---> S4

S3,	\State 3 records CS+ lever presses
	#RZ(7): ADD A(5), E(2*T); SET N(Q) = X(1);
	ADD Q; SET N(Q) = -987.987; SHOW 10, CS+ Lever Presses, A(5);
	IF E(2*T+1) < 0 [@LATENCY, @NULL]
		@LATENCY: SET E(2*T+1) = X(3), A(31) = A(31) + X(3);
		ADD A(26) ---> SX
		@NULL: ---> SX

	#Z^StartPostCS: OFF Z(7); IF E(2*T+1) < 0 [@NORESPONSE, @ACCEPT]
		@NORESPONSE: SET A(31) = A(31) + Z(5) ---> S2
		@ACCEPT: ---> S2
	#Z^Shutdown: OFF Z(7); IF E(2*T+1) < 0 [@NORESPONSE, @ACCEPT]
		@NORESPONSE: SET A(31) = A(31) + Z(5) ---> S5
		@ACCEPT: --->  S5

S4,	\State 4 records CS- lever presses
	#RZ(8): ADD A(10), J(2*T); SET O(R) = X(1);
	ADD R; SET O(R) = -987.987; SHOW 14, CS- Lever Presses, A(10);
	IF J(2*T+1) < 0 [@LATENCY, @NULL]
		@LATENCY: SET J(2*T+1) = X(3), A(41) = A(41) + X(3);
		ADD A(36) ---> SX
		@NULL: ---> SX 

	#Z^StartPostCS: OFF Z(8); IF J(2*T+1) < 0 [@NORESPONSE, @ACCEPT]
		@NORESPONSE: SET A(41) = A(41) + A(5) ---> S2
		@ACCEPT: ---> S2
	#Z^Shutdown: OFF Z(8); IF J(2*T+1) < 0 [@NORESPONSE, @ACCEPT]
		@NORESPONSE: SET A(41) = A(41) + A(5) ---> S5
		@ACCEPT: ---> S5

S5,	\State 5 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 7 - Active/Inactive Lever Order

S.S.7,
S1,	\WAIT
	0.5": ---> S2

S2,	\State 2 starts selecting trial types
	0.01": RANDD V(S) = U; IF V(S) = 1 [@ACTIVE, @INACTIVE]
		@ACTIVE: ADD X(25), Z(13); IF X(25) >= (Z(2) / 2) [@NOMORE, @CONTINUE]
			@NOMORE: ---> S3 
			@CONTINUE: ADD S --->SX
		@INACTIVE: ADD X(26), Z(14); IF X(26) >= (Z(2) / 2) [@NOMORE, @CONTINUE]
			@NOMORE: ---> S4
			@CONTINUE: ADD S ---> SX

S3,	\State 3 will fill out inactive trials
	0.01": IF S + 1 >= Z(2) [@COMPLETE, @FILL]
		@COMPLETE: SET X(25) = 0, X(26) = 0, V(S+1) = -987.987, S = 0 ---> S5
		@FILL: ADD S; SET V(S) = 2; ADD Z(14) ---> SX

S4,	\State 4 will fill out active trials
	0.01": IF S + 1 >= Z(2) [@COMPLETE, @FILL]
		@COMPLETE: SET X(25) = 0, X(26) = 0, V(S+1) = -987.987, S = 0 ---> S5
		@FILL: ADD S; SET V(S) = 1; ADD Z(13) ---> SX

S5,	\State 5 is a holding state with possibility for reset
	#Z^MemMismatch: ZEROARRAY V; SET Z(13) = 0, Z(14) = 0 ---> S1

	#START: ---> S6

S6,	\State 6 is a holding state
	#START: ---> SX

\-------------------------------------------------------------------------
\State Set 8 - Housekeeping - Pre-Session Screen Updater, Memory Check, Unusual Response Check

S.S.8,
S1,	\State 1 will refresh the screen with selected control variables
	0.99": IF S.S.1 <= 6 [@DISPLAY, @HOLD]
		@DISPLAY: SHOW 3, Number of Trials, Z(2);
		SHOW 4, CS Duration, Z(5);
		SHOW 5, Pump Duration, Z(6);
		SHOW 2, CS+ Lever (1L 2R), Z(7) ---> S2
		@HOLD: ---> S3

	#START: SHOW 16, Long PE Alert, A(46);
	SHOW 17, Short PE Alert, A(47), 18, High Frequency Alert, A(48);
	SET X(8) = SECSTODAY; SET X(9) = X(8) + Z(0) + Z(1) - (Z(12) * 60);

	SET X(10) = X(9) / 3600, X(11) = X(9) / 3600;
	SET X(29) = Y, Y = X(10);

	~Y := Trunc(Y);~; SET X(10) = Y, Y = X(11);
	~Y := Frac(Y);~; SET Y = Y * 60; ~Y := Round(Y);~;
	SET X(11) = Y, Y = X(29);
	SET X(9) = X(10) + (X(11) / 100);
	IF X(9) >= 24 [@TOMORROW, @TODAY]
		@TOMORROW: SET X(9) = X(9) - 24;
		SHOW 15, Come Back Tomorrow, X(9) ---> S3
		@TODAY: SHOW 15, Come Back At, X(9) ---> S3

S2,	\State 2 will check the memory variables
	#START: SHOW 16, Long PE Alert, A(46);
	SHOW 17, Short PE Alert, A(47), 18, High Frequency Alert, A(48);
	SET X(8) = SECSTODAY; SET X(9) = X(8) + Z(0) + Z(1) - (Z(12) * 60);

	SET X(10) = X(9) / 3600, X(11) = X(9) / 3600;
	SET X(29) = Y, Y = X(10);

	~Y := Trunc(Y);~; SET X(10) = Y, Y = X(11);
	~Y := Frac(Y);~; SET Y = Y * 60; ~Y := Round(Y);~;
	SET X(11) = Y, Y = X(29);
	SET X(9) = X(10) + (X(11) / 100);
	IF X(9) >= 24 [@TOMORROW, @TODAY]
		@TOMORROW: SET X(9) = X(9) - 24;
		SHOW 11, Come Back Tomorrow, X(9) ---> S3
		@TODAY: SHOW 11, Come Back At, X(9) ---> S3

	0.01": IF ((X(12) = Z(1)) AND (X(13) = Z(2))) AND ((X(14) = Z(3)) AND (X(15) = Z(4))) [@OK, @MISMATCH]
		@OK: ---> S1
		@MISMATCH: Z^MemMismatch ---> S1

S3,	\State 3 monitors port entries for unusual properties, specifically high frequency
	#R^DisPortEntry: IF P = 6 [@IRI, @ELIF]
		@IRI: SET X(21) = (L(5) - L(0)) / 5;
		IF X(21) < Z(11) [@SHORTIRI, @OK]
			@SHORTIRI: ADD A(48); SHOW 18, High Frequency Alert, A(48) ---> S4
			@OK: ---> S4
		@ELIF: IF P >= 7 [@MOVINGAVERAGE, @NULL]
			@MOVINGAVERAGE: SET X(21) = (L(P) - L(P-5)) / 5;
			IF X(21) < Z(11) [@SHORTIRI, @OK]
				@SHORTIRI: ADD A(48); SHOW 18, High Frequency Alert, A(48) ---> S4
				@OK: ---> S4
			@NULL: ---> S4

	#Z^Shutdown: ---> S5

S4,	\state 4 monitors port entries once their durations have been recorded
	#R^ConPortEntry: ---> SX

	0.01": IF M(P-1) > Z(9) [@LONGPE, @NORMALPE]
		@LONGPE: ADD A(46); SHOW 16, Long PE Alert, A(46);
		IF P >= 4 [@AVERAGE, @NULL]
			@AVERAGE: ARITHMETICMEAN X(22) = M, P-5, P-1; IF X(22) < Z(10) [@SHORTPE, @NULL]
				@SHORTPE: ADD A(47); SHOW 17, Short PE Alert, A(47) ---> S3
				@NULL: ---> S3
			@NULL: ---> S3
		@NORMALPE: IF P >= 4 [@AVERAGE, @NULL]
			@AVERAGE: ARITHMETICMEAN X(22) = M, P-5, P-1; IF X(22) < Z(10) [@SHORTPE, @NULL]
				@SHORTPE: ADD A(47); SHOW 17, Short PE Alert, A(47) ---> S3
				@NULL: ---> S3
			@NULL: ---> S3

	#Z^Shutdown: IF M(P-1) > Z(9) [@LONGPE, @NORMALPE]
		@LONGPE: ADD A(46); SHOW 16, Long PE Alert, A(46);
		IF P >= 4 [@AVERAGE, @NULL]
			@AVERAGE: ARITHMETICMEAN X(22) = M, P-5, P-1; IF X(22) < Z(10) [@SHORTPE, @NULL]
				@SHORTPE: ADD A(47); SHOW 17, Short PE Alert, A(47) ---> S5
				@NULL: ---> S5
			@NULL: ---> S5
		@NORMALPE: IF P >= 4 [@AVERAGE, @NULL]
			@AVERAGE: ARITHMETICMEAN X(22) = M, P-5, P-1; IF X(22) < Z(10) [@SHORTPE, @NULL]
				@SHORTPE: ADD A(47); SHOW 17, Short PE Alert, A(47) ---> S5
				@NULL: ---> S5
			@NULL: ---> S5

S5,	\State 5 is a holding state
	#START: ---> SX
\ OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
\ SOFTWARE.
\-------------------------------------------------------------------------